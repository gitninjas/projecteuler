<?php 

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:  1, 3, 6, 10, 15, 21, 28, 36, 45, 55

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

require_once(dirname(__FILE__) . '/../bootstrap.php');
ini_set('memory_limit', '-1');

echo "\nThe value of the first Triangle Number to have over five hundred divisors:";

$start = microtime(true);
$ans = getTriangleNumberByNumOfDivisors(500);
$end = microtime(true);
$time = number_format($end - $start, 15);

echo "\n--- Method 1 ---";
echo "\nAns\t: $ans";
echo "\nTime\t: $time\n";

// Ans     : 76576500
// Time    : 5.836569070816040

$start = microtime(true);
$ans = getTriangleNumberByNumOfDivisors2(500);
$end = microtime(true);
$time = number_format($end - $start, 15);

echo "\n--- Method 2 ---";
echo "\nAns\t: $ans";
echo "\nTime\t: $time\n";

// Ans     : 76576500
// Time    : 5.728774070739746

function getTriangleNumberByNumOfDivisors($numDivisors)
{
    $triangleNumbers = getTriangleNums($numDivisors*$numDivisors);
    foreach ($triangleNumbers as $number) {
        $numFactors = getFactorsCount($number);
        if ($numFactors >= $numDivisors) {
            return $number;
        }
    }
    return false;
}

function getTriangleNums($limit)
{
    $triangle_numbers = array(1);
    for ($i=1; $i<$limit; $i++) {
        $triangle_numbers[$i] = $triangle_numbers[$i-1] + ($i+1);
    }
    return $triangle_numbers;
}

function getFactorsCount($number)
{
    $count = 2;
    for ($i=2; $i*$i<=$number; $i++) {
        if ($number % $i == 0) {
            $count += 2;
        }
    }
    return $count;
}

function getTriangleNumberByNumOfDivisors2($numDivisors)
{
    $triangleNumber = 1;
    for($i = 2; ; $i++) {
        $numFactors = getFactorsCount($triangleNumber);
        if ($numFactors >= $numDivisors) {
            return $triangleNumber;
        }
        $triangleNumber += $i;
    }
    return false;
}